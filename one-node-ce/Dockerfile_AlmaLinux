# -*- mode: shell-script -*-
# (c) Copyright [2021-2023] Open Text.
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
ARG os_version
ARG os_image

FROM ${os_image}:${os_version} as builder

ENV VERTICA_OPT_DIR="/opt/vertica"
ENV VERTICA_VOLUME_DIR="/data"
ENV VERTICA_DATA_DIR="${VERTICA_VOLUME_DIR}/vertica"
ENV VMART_DIR="${VERTICA_OPT_DIR}/examples/VMart_Schema"

ARG vertica_package
ARG vertica_db_user="dbadmin"
ARG vertica_db_group="verticadba"
ARG vertica_db_name="VMart"
ARG dbadmin_gid=1000
ARG dbadmin_id=1000
# Start / end years generated into date dimension table
ARG vmart_start_year=2003
ARG vmart_end_year=2032

ADD ./packages/${vertica_package} /tmp/${vertica_package}
# this is a script which removes unnecessary stuff from the
# container image
ADD ./tools/cleanup.sh /tmp/
ADD ./tools/package-checksum-patcher.py /tmp/
ADD ./tools/init.d.functions /etc/rc.d/init.d/functions

# Install prerequisites and Vertica
    # Update is needed to be confident that we're picking up
    # fixed libraries.  We depend on malware check of container afterwards 
# this creates multiple layers, but the many layers will be taken care of
# when we switch to the next stage of the build
RUN bash -c "if [ \"$(rpm -E %{rhel})\" == '8' ]; then yum install -q -y dnf-plugins-core; yum -q config-manager --set-enabled powertools; yum -q -y install glibc-locale-source; fi" 
 # Create DB user and group in OS. Fix their ID, so they match in the following stage
RUN yum -q -y update
RUN yum -y update --security
RUN yum -q -y makecache 
 # CentOS 8
RUN yum install -y \
        cronie \
        dialog \
        gcc-c++ \
        glibc-static \
        gdb \
        iproute \
        libstdc++-static \
        make \
        mcelog \
        openssh-server \
        openssh-clients \
        openssl \
        sudo \
        sysstat \
        wget \
        which 
RUN yum localinstall -q -y /tmp/${vertica_package} 
 # Cleanup to optimize the size of final image
RUN rm -rf ${VERTICA_OPT_DIR}/lib64 
 # CentOS 8 - fixes issue "Unsupported locale character encoding: use
 # a utf8 locale, not a ANSI_X3.4-1968 locale" 
RUN bash -c "if [ \"$(rpm -E %{rhel})\" == '8' ]; then localedef -i en_US -f UTF-8 en_US.UTF-8; fi" 
# Create DB user in OS and create python egg cache dir under this user
# Run install_vertica script to prepare environment
RUN mkdir -p ${VERTICA_DATA_DIR} \
     && /usr/sbin/groupadd -r -g $dbadmin_gid $vertica_db_group \
     # While it is true that install_vertica creates $vertica_db_user
     # and $vertica_db_group we do it by hand here in order to be able
     # to specify the UID of the $vertica_db_user  
     && /usr/sbin/useradd -r \
                          -m \
                          -s /bin/bash \
                          --uid $dbadmin_id \
                          -g $vertica_db_group \
                          $vertica_db_user \
 && ${VERTICA_OPT_DIR}/sbin/install_vertica \
                      --accept-eula \
                      --data-dir $VERTICA_DATA_DIR \
                      --dba-group $vertica_db_group \
                      --dba-user $vertica_db_user \
                      --dba-user-password-disabled \
                      --debug \
                      --failure-threshold NONE \
                      --hosts 127.0.0.1 \
                      --ignore-aws-instance-type \
                      --ignore-install-config \
                      --license CE \
                      --no-system-configuration \
                      --point-to-point \
                      --no-ssh-key-install \
                      -U

# Compile VMART bins and generate date dimension corresponding to
# start/end years coming from ARGs  
RUN set -x \
 && cd ${VMART_DIR} \
 && make vmart_gen \
 && g++ vmart_genTime.c -o vmart_genTime \
 && chmod +x vmart_genTime \
 && ./vmart_genTime ${vmart_start_year} ${vmart_end_year} > Time_custom.txt

RUN chown -R $vertica_db_user:$vertica_db_group ${VERTICA_OPT_DIR} \
    && chown -R $vertica_db_user:$vertica_db_group /home/$vertica_db_user

# docker daemons versions < 19.03 don't preserve ownership on COPY --from
# but doing the chown -R in the second half is costly in terms of
# image size, so we compromise by making everything group writable in
# /opt/vertica:
RUN chmod -R g+w ${VERTICA_OPT_DIR}


RUN sh /tmp/cleanup.sh

############################################################################
FROM ${os_image}:${os_version}

ARG vertica_db_user="dbadmin"
ARG vertica_db_group="verticadba"
ARG vertica_db_name="VMart"

ARG dbadmin_gid=1000
ARG dbadmin_id=1000

ENV VERTICA_OPT_DIR="/opt/vertica"
ENV VERTICA_DB_NAME="$vertica_db_name"
ENV VERTICA_OPT_BIN="${VERTICA_OPT_DIR}/bin"
ENV VERTICA_HOME_DIR="/home/$vertica_db_user"
ENV VERTICA_VOLUME_DIR="/data"
ENV VERTICA_DATA_DIR="${VERTICA_VOLUME_DIR}/vertica"
ENV PYTHON_EGG_CACHE="/tmp/.python-eggs"
ENV VMART_DIR="${VERTICA_OPT_DIR}/examples/VMart_Schema"
ENV VMART_CONFIRM_LOAD_SCHEMA="public"
ENV VMART_CONFIRM_LOAD_TABLE="vmart_load_success"
ENV VMART_ETL_SCRIPT="01_load_vmart_schema.sh"
ENV VMART_ETL_SQL="02_vmart_etl.sql"
ENV ENTRYPOINT_SCRIPT="docker-entrypoint.sh"
ENV ENTRYPOINT_SCRIPT_PATH="${VERTICA_HOME_DIR}/${ENTRYPOINT_SCRIPT}"

COPY --from=builder $VERTICA_OPT_DIR $VERTICA_OPT_DIR
COPY --from=builder $VERTICA_DATA_DIR $VERTICA_DATA_DIR

ADD ./tools/package-checksum-patcher.py /tmp/
ADD ./tools/init.d.functions /etc/rc.d/init.d/functions

# Recreate DB user in OS and create python egg cache dir under this user
# in this stage of the build, we want to reduce the number of layers
RUN set -x \
    # COPY doesn't preserve the mode of the top-level
    && chmod g+w ${VERTICA_OPT_DIR} \
     && /usr/sbin/groupadd -r -g $dbadmin_gid $vertica_db_group \
     && /usr/sbin/useradd -r \
                          -m \
                          -s /bin/bash \
                          --uid $dbadmin_id \
                          # add dbadmin to root to work around COPY
                          # not preserving owner and group prior to
                          # docker version 19.03
                          -G root \
                          -g $vertica_db_group \
                          $vertica_db_user \
 && su - $vertica_db_user -c "mkdir $PYTHON_EGG_CACHE" \
# Install prerequisites, create Vertica data dir, set privileges, document
# fix timezone issue and generate locales in case of centOS 8 
 && yum -q -y update \
 && yum -y update --security \
 && yum -q -y makecache \
 # CentOS 8
 && bash -c "if [ \"$(rpm -E %{rhel})\" == '8' ]; then yum install -q -y dnf-plugins-core; yum -q config-manager --set-enabled powertools; yum -q -y install glibc-locale-source; localedef -i en_US -f UTF-8 en_US.UTF-8; fi" \
     && yum install -y \
        cronie \
        dialog \
        gdb \
        iproute \
        libstdc++-static \
        mcelog \
        openssh-server \
        openssh-clients \
        openssl \
        sudo \
        sysstat \
        wget \
        which \
 # Allow passwordless sudo access from dbadmin
     && echo "$vertica_db_user ALL=(ALL) NOPASSWD: ALL" | tee -a /etc/sudoers \
     # docker daemons versions < 19.03 don't preserve ownership on COPY --from
     # so we have to chown these things again
     && chown -R $vertica_db_user:$vertica_db_group ${VERTICA_DATA_DIR} \
         && chown -R $vertica_db_user:$vertica_db_group /home/$vertica_db_user \
     # but this chown is expensive in image-size, so we use aother
     # trick in the first half of the build 
     # && chown -R $vertica_db_user:$vertica_db_group ${VERTICA_OPT_DIR} \
 # Link OS timezones, check entrypoint script
 # && rm -rf ${VERTICA_OPT_DIR}/share/timezone \
 # && ln -sT /usr/share/zoneinfo ${VERTICA_OPT_DIR}/share/timezone \
         && yum clean all \
         && rm -rf /var/cache/yum 

# vertica v10 (and earlier, but 10 is what we're interested in enough
# to test) vertica_agent script uses the rpm command to find out where
# Vertica is installed.  But we threw the 900-1200 MB of rpm info away
# when we did the multi-stage build.  v11 and subsequent used a
# different technique more compatible with what we're doing with
# containers 
ADD ./tools/vertica_agent.11 /tmp/
ADD ./tools/vertica_agent_patch.sh /tmp/
RUN bash /tmp/vertica_agent_patch.sh

ADD ./env_setup/vertica_env.sh /etc/profile.d/
ADD ./vmart/${VMART_ETL_SQL} ./vmart/${VMART_ETL_SCRIPT} ${VMART_DIR}/
ADD ./${ENTRYPOINT_SCRIPT} ${ENTRYPOINT_SCRIPT_PATH}

# DB is running under vertica_db_user, not under root
USER $vertica_db_user

WORKDIR ${VERTICA_HOME_DIR}

ADD ./env_setup/.vsqlrc .vsqlrc

VOLUME ${VERTICA_VOLUME_DIR}

ENTRYPOINT $ENTRYPOINT_SCRIPT_PATH

# vertica port
EXPOSE 5433
# vertica agent port
EXPOSE 5444

LABEL image_name="vertica_db"
LABEL os_family="almalinux"
LABEL os_version="$os_version"
LABEL maintainer="K8 Team"
